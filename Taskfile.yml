---
version: '3'

vars:
  PYTHON_VERSION: '3.12'  # Standardize on 3.12
  VENV_DIR: .venv

tasks:
  default:
    desc: "Sync environment, lint, and run tests."
    cmds:
      - task: sync
      - task: format
      - task: pre-commit:run # Ensure hooks run before tests in default task
      - task: lint
      - task: test
    silent: true # Hide task execution lines for default task

  setup:
    desc: "Set up Python virtual environment and install dependencies using uv.lock."
    aliases: [sync]
    cmds:
      - echo "Ensuring Python version {{.PYTHON_VERSION}} is available/pinned..."
      # uv python pin {{.PYTHON_VERSION}}  # Optional: if you want uv to manage/install python versions
      - echo "Creating venv (if needed) and syncing with uv.lock..."
      - uv sync --all-extras  # Installs main + dev dependencies from uv.lock
    sources:
      - pyproject.toml
      - uv.lock
    generates:
      # Check for a file that uv sync creates
      - '{{.VENV_DIR}}/pyvenv.cfg'
    status:
      # Check if pytest is importable using the venv python
      - >-
        {{if OS | eq "windows"}}{{.VENV_DIR}}\Scripts\python{{else}}{{.VENV_DIR}}/bin/python{{end}}
        -c "import sys; import pytest"

  test:
    desc: "Run tests using pytest via uv run."
    deps: [sync]
    cmds:
      - uv run pytest tests/test_composer.py
    sources:
      - composer.py
      # Globs to trigger re-run if source or test files change
      - tests/**/*.py
      - tests/functional_test_project/src/**/*.lua
      - tests/functional_test_project/src/**/*.txt

  lint:
    desc: "Lint Python code with Ruff and YAML files with yamllint."
    deps: [sync]
    cmds:
      - task: lint-python
      - task: lint-yaml

  lint-python:
    desc: "Lint Python code with Ruff via uv run."
    deps: [sync]
    cmds:
      - uv run ruff check . --fix
      - uv run ruff format --check .
    sources:
      - composer.py
      - tests/**/*.py
      - pyproject.toml  # Ruff config is here

  lint-yaml:
    desc: "Lint YAML files with yamllint via uv run."
    deps: [sync]
    cmds:
      - uv run yamllint action.yml
      - uv run yamllint Taskfile.yml
      - uv run yamllint .github/workflows/*.yml
    sources:
      - action.yml
      - Taskfile.yml
      - .github/workflows/*.yml

  format:
    desc: "Format Python code with Ruff via uv run."
    deps: [sync]
    cmds:
      - uv run ruff format
    sources:
      - composer.py
      - tests/**/*.py
      - action.yml
      - Taskfile.yml
      - pyproject.toml

  lock:
    desc: "Generate or update the uv.lock file from pyproject.toml."
    cmds:
      - uv lock --all-extras
    sources:
      - pyproject.toml

  pre-commit:install:
    desc: "Install pre-commit hooks into your .git/hooks directory."
    deps: [sync]  # Ensure pre-commit is installed
    cmds:
      - uv run pre-commit install
    status:
      # Check if the pre-commit hook script exists
      - test -f .git/hooks/pre-commit

  pre-commit:run:
    desc: "Run all pre-commit hooks on all files."
    deps: [sync]
    cmds:
      - uv run pre-commit run --all-files

  clean:
    desc: "Remove virtual environment and other generated files."
    cmds:
      - echo "Removing {{.VENV_DIR}} and dist directories..."
      # Use python to remove directory for cross-platform compatibility
      - python -c "import shutil; shutil.rmtree('.venv', ignore_errors=True); shutil.rmtree('dist', ignore_errors=True)"
      - echo "Removing __pycache__ directories and *.pyc/*.pyo files..."
      - find . -type d -name '__pycache__' -exec rm -r {} + || true
      - find . -type f \( -name '*.pyc' -o -name '*.pyo' \) -delete || true
    silent: true  # Hide the find/rm commands unless there's an error
